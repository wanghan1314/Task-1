<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <context:annotation-config/>
    <context:component-scan base-package="com.jns.service"/>
    <context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true" />
    <bean id="cluster4spring" abstract="true">
        <!-- 是否启动时加载stub -->
        <property name="refreshEndpointsOnStartup" value="true" />
        <!-- 调用异常时，将重新加载stub -->
        <property name="refreshEndpointsOnConnectFailure" value="true" />
        <!-- 调用失败时是否切换到其他服务端 -->
        <property name="switchEndpointOnFailure" value="true" />
        <!-- 追踪拦截器启用 -->
        <property name="registerTraceInterceptor" value="true" />
        <!-- 缓存stub-->
        <property name="cacheEndpoints" value="true" />
    </bean>
    <bean id="studentService" class="org.softamis.cluster4spring.rmi.RmiUrlListProxyFactoryBean" parent="cluster4spring">
        <property name="serviceInterface" value="com.jns.service.StudentService"/>
        <property name="serviceURLs">
            <list>
                <value>rmi://139.199.126.254:1199/StudentService</value>
                <value>rmi://139.199.127.53:1199/StudentService</value>
            </list>
        </property>
        <!-- 调用时选择那个url的策略 -->
        <property name="endpointSelectionPolicy">
            <bean class="org.softamis.cluster4spring.support.invocation.ShuffleEndpointSelectionPolicy"></bean>
        </property>
    </bean>
    <bean id="usersService" class="org.softamis.cluster4spring.rmi.RmiUrlListProxyFactoryBean" parent="cluster4spring">
        <property name="serviceInterface" value="com.jns.service.UsersService"/>
        <property name="serviceURLs">
            <list>
                <value>rmi://139.199.127.53:1198/UsersService</value>
                <value>rmi://139.199.126.254:1198/UsersService</value>
            </list>
        </property>
        <!-- 调用时选择那个url的策略 -->
        <property name="endpointSelectionPolicy">
            <bean class="org.softamis.cluster4spring.support.invocation.ShuffleEndpointSelectionPolicy"></bean>
        </property>
    </bean>
    <!--<bean id="studentService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true">-->
    <!--<property name="serviceUrl" value="rmi://139.199.126.254:1199/StudentService"/>-->
    <!--<property name="serviceInterface" value="com.jns.service.StudentService"/>-->
<!--</bean>-->
    <!--<bean id="usersService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true">-->
        <!--<property name="serviceUrl" value="rmi://139.199.126.254:1198/UsersService"/>-->
        <!--<property name="serviceInterface" value="com.jns.service.UsersService"/>-->
    <!--</bean>-->
    <!--<bean id="studentService1" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true">-->
        <!--<property name="serviceUrl" value="rmi://139.199.127.53:1199/StudentService"/>-->
        <!--<property name="serviceInterface" value="com.jns.service.StudentService"/>-->
    <!--</bean>-->
    <!--<bean id="usersService1" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true">-->
        <!--<property name="serviceUrl" value="rmi://139.199.127.53:1198/UsersService"/>-->
        <!--<property name="serviceInterface" value="com.jns.service.UsersService"/>-->
    <!--</bean>-->

    <bean id="cos" class="com.jns.entity.Cos">
</bean>
    <bean id="oss" class="com.jns.entity.Oss">
    </bean>
    <bean id="default" class="com.jns.entity.Default">
    </bean>
    <!--数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
        <property name="url" value="jdbc:mysql://39.105.66.68:3306/data?useSSL=false&amp;characterEncoding=UTF-8" />
        <property name="username" value="root" />
        <property name="password" value="225510zZ@" />
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3" />
        <property name="minIdle" value="3" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 1" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>

    <!-- mybatis文件配置，扫描所有mapper文件 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="typeAliasesPackage"  value="com.jns.entity"/>
	<property name="dataSource" ref="dataSource"/>
	<property name="mapperLocations" value="classpath:com/jns/mapper/*.xml"/>
	<property name="plugins">
            <array>
              <bean class="com.github.pagehelper.PageInterceptor">
                <property name="properties">
                  <!--使用下面的方式配置参数，一行配置一个 -->
                  <value>
                  </value>
                </property>
              </bean>
            </array>
          </property>    
	</bean>

    <!-- spring与mybatis整合配置，扫描所有dao，在单数据源的情况下可以不写sqlSessionFactoryBeanName -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="com.jns.mapper"/>
	</bean>


    <!--spring 集成缓存服务器（memcached） -->
    <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"
          factory-method="getInstance" init-method="initialize"
          destroy-method="shutDown">
        <constructor-arg>
            <value>memCachedPool</value>
        </constructor-arg>
        <!--设置缓存服务器列表，当使用分布式缓存的时，可以指定多个缓存服务器-->
        <property name="servers">
            <list>
                <value>${memcache.server}</value>
            </list>
        </property>
        <!--初始连接数-->
        <property name="initConn">
            <value>${memcache.initConn}</value>
        </property>
        <!--最小连接数-->
        <property name="minConn">
            <value>${memcache.minConn}</value>
        </property>
        <!--最大连接数-->
        <property name="maxConn">
            <value>${memcache.maxConn}</value>
        </property>
        <!--设置主线程的睡眠时间-->
        <property name="maintSleep">
            <value>${memcache.maintSleep}</value>
        </property>
        <!--nagle算法-->
        <property name="nagle">
            <value>${memcache.nagle}</value>
        </property>

        <property name="socketTO">
            <value>${memcache.socketTO}</value>
        </property>
    </bean>

    <bean id="memCachedClient" class="com.danga.MemCached.MemCachedClient">
        <!--属性-->
        <constructor-arg>
            <value>memCachedPool</value>
        </constructor-arg>
    </bean>



    <!--redis连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" >
        <!--最大空闲数-->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!--连接池的最大数据库连接数  -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!--最大建立连接等待时间-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
        <!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <!--在空闲时检查有效性, 默认false  -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}" />
    </bean >
    <!--redis连接工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="poolConfig" ref="jedisPoolConfig"></property>
        <!--IP地址 -->
        <property name="hostName" value="${redis.hostName}"></property>
        <!--端口号  -->
        <property name="port" value="${redis.port}"></property>
        <!--如果Redis设置有密码  -->
        <property name="password" value="${redis.password}" />
        <!--客户端超时时间单位是毫秒  -->
        <property name="timeout" value="${redis.timeout}"></property>
    </bean>

    <!--redis操作模版,使用该对象可以操作redis  -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>

        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>

        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean >

    <!--自定义redis工具类,在需要缓存的地方注入此类  -->
    <bean id="redisUtil" class="com.jns.utils.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate" />
    </bean>


</beans>