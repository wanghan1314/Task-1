<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:redis="http://www.springframework.org/schema/redis"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd">

    <!--redis-->
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <!--<property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>-->
    </bean>
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:host-name="${redis.host}" p:port="${redis.port}" p:pool-config-ref="poolConfig"/>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
<!--        <property name="defaultSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>-->
        <!--事务管理-->
        <property name="enableTransactionSupport" value="true"/>
    </bean>

    <!--消息的订阅与发布-->
    <!--序列化方式-->
    <bean id="redisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
    <!--注册消息监听器适配器，MessageListenerAdapter会把接收到的消息做一个类型转换，然后利用反射把它交给真正的目标处理器-->
    <!--所以在定义的时候需要指定这个类-->
    <!--调用此类处理消息的时候，如果没有通过defaultListenerMethod指定方法，则会默认调用handleMessage方法-->
<!--    <bean id="messageListener" class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter"
          p:delegate-ref="messageDelegateListenerImpl" p:serializer-ref="redisSerializer"/>
    <redis:listener-container>
        <redis:listener ref="messageDelegateListenerImpl" serializer="redisSerializer" method="handleMessage" topic="cctv"/>
    </redis:listener-container>-->
    <!--订阅者-->
    <!--注册监听器-->
<!--    <bean id="redisMessageListenerContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="messageListeners">
            <map>
                <entry key-ref="messageListener">
                    <bean class="org.springframework.data.redis.listener.ChannelTopic" c:_0-ref="cctv"/>
                </entry>
            </map>
        </property>
    </bean>-->

</beans>