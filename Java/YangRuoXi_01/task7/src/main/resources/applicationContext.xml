<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:c="http://www.springframework.org/schema/c" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 配置自动扫描的包 -->
    <context:annotation-config/>
    <context:component-scan base-package="com.jnshu.task7">
        <!-- 扫描时跳过 @Controller 注解的JAVA类（控制器） -->
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
        <context:exclude-filter type="custom" expression="com.jnshu.task7.beans.api"/>
    </context:component-scan>
    <!--配置aop-->
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <!--<bean id="userController" class="com.jnshu.clroom.controller.UserController" />-->
    <!--<bean name="timerAspect" class="com.jnshu.clroom.loggerAop.TimerAspect"/>-->


    <!--配置数据源-->
    <context:property-placeholder location="classpath*:properties/*.properties"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />
    </bean>

    <!--整合mybatis-->

    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="typeAliasesPackage" value="com.jnshu.task7.beans"/>
        <property name="mapperLocations" >
            <list>
                <value>classpath:mapper/UserMapper.xml</value>
                <value>classpath:mapper/ProfessionMapper.xml</value>
                <value>classpath:mapper/LoginMapper.xml</value>
            </list>
        </property>
        <!--Mybatis分页-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--使用下面的方式配置参数，一行配置一个 -->
                        <value>
                            pageSizeZero=truereasonable=false
                            params=pageNum=pageHelperStart;pageSize=pageHelperRows;
                            supportMethodsArguments=false
                            helperDialect=mysql
                            reasonable=true
                            offsetAsPageNum=true
                            rowBoundsWithCount=true
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jnshu.task7.mapper"/>
    </bean>

    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
        <property name="order" value="1"/>
    </bean>

    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>WEB-INF/layout.xml</value>
            </list>
        </property>
    </bean>
    <!--邮件发送参数-->
    <bean id="mailParams" class="com.jnshu.task7.beans.api.MailParams">
        <property name="apiUser" value="${Mail.apiUser}"/>
        <property name="apiKey" value="${Mail.apiKey}"/>
        <property name="from" value="${Mail.from}"/>
        <property name="fromName" value="${Mail.fromName}"/>
        <property name="templateInvokeName" value="${Mail.templateInvokeName}"/>
        <property name="subject" value="${Mail.subject}"/>
        <property name="url" value="${Mail.url}"/>
        <property name="toUrl" value="${Mail.toUrl}"/>
    </bean>

    <!--上传图片所需要参数-->
    <bean id="pictureParams" class="com.jnshu.task7.beans.api.PictureParams" >
        <property name="accessKeyId" value="${pic.accessKeyId}"/>
        <property name="accessKeySecret" value="${pic.accessKeySecret}"/>
        <!--<property name="bucketName" value="${pic.bucketName}"/>-->
        <property name="endpoint" value="${pic.endpoint}"/>
        <!--<property name="pictureUrl" value="${pic.pictureUrl}"/>-->
    </bean>

    <!--阿里云所需配置信息-->
    <bean id="ossClient" class="com.aliyun.oss.OSSClient"
          c:accessKeyId="${pic.accessKeyId}"
          c:secretAccessKey="${pic.accessKeySecret}"
          c:endpoint="${pic.endpoint}"/>


    <!--腾讯云上传文件所需配置信息-->
    <bean class="com.qcloud.cos.COSClient" id="cosClient" autowire="constructor">
        <constructor-arg>
            <bean class="com.qcloud.cos.auth.BasicCOSCredentials">
                <constructor-arg name="accessKey" value="${picture.accessKey}"/>
                <constructor-arg name="secretKey" value="${picture.secretKey}"/>
            </bean>
        </constructor-arg>

        <constructor-arg>
            <bean class="com.qcloud.cos.ClientConfig">
                <constructor-arg>
                    <bean class="com.qcloud.cos.region.Region">
                        <constructor-arg name="region_name" value="${picture.region_name}"/>
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>

    </bean>



</beans>





