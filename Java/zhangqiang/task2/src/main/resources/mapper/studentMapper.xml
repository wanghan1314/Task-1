<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.restful.dao.mapper.StudentMapper">

    <resultMap id="studentMapper" type="com.restful.model.Student">
        <id column="id" property="id"/>
        <result column="create_at"  property="create_at"/>
        <result column="update_at"  property="update_at"/>
        <result column="name" property="name"/>
        <result column="qq"  property="qq"/>
        <result column="type"  property="type"/>
        <result column="start_time"  property="startTime"/>
        <result column="school"  property="school"/>
        <result column="stu_num" property="stuNum"/>
        <result column="daily_link"  property="dailyLink"/>
        <result column="pro" property="pro"/>
        <result column="brother" property="brother"/>
        <result column="user_id" property="userId"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,create_at,update_at,name,qq,type,start_time,school,stu_num,daily_link,pro,brother
    </sql>
    
    
    <!--parameterType	将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。-->
    <!--resultType	从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。-->
    <!--resultMap	外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，许多复杂映射的情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用。-->
    <!--statementType	STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。-->
    <select id="selectById" parameterType="int" resultMap="studentMapper" >
        SELECT * FROM student where id = #{id}
        <!--<where>-->
            <!--<if test="id!=null">-->
                <!--id = #{id}-->
            <!--</if>-->
        <!--</where>-->
    </select>

    <select id="selectConut" resultType="int">
        SELECT COUNT(*) FROM student
    </select>

    <!--根据列查询 所有列名-->
    <select id="findByStudent" parameterType="Student" resultMap="studentMapper">
        SELECT * FROM student
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <if test="id!=null and id!=0">
                AND id = #{id}
            </if>
            <if test="create_at!=null and create_at!=0">
                AND create_at = #{create_at}
            </if>
            <if test="update_at!=null and update_at!=0">
                AND update_at = #{update_at}
            </if>
            <if test="name!=null">
                AND name like '%${name}%'
            </if>
            <if test="qq!=null and qq!=0">
                AND qq like '%${qq}%'
            </if>
            <if test="type!=null and type!=0">
                AND type = #{type}
            </if>
            <if test="startTime!=null">
                AND start_time like '%${startTime}%'
            </if>
            <if test="school!=null">
                AND schoole like '%${schoole}%'
            </if>
            <if test="stuNum!=null and stuNum!=0">
                AND stu_num = #{stuNum}
            </if>
            <if test="dailyLink!=null">
                AND daily_link = #{dailyLink}
            </if>
            <if test="pro!=null">
                AND pro like '%${pro}%'
            </if>
            <if test="brother!=null">
                AND brother like '%${brother}%'
            </if>
            <if test="userId!=null and userId!=0">
                AND user_id = #{userId}
            </if>

        </trim>
    </select>

    <select id="findByPage"  parameterType="Map" resultMap="studentMapper">
      SELECT
        <include refid="Base_Column_List"/>
         FROM student
        <if test="start!=null and size!=null">
            limit #{start} ,#{size}
        </if>
    </select>

    <!--插入单条数据-->
    <insert id="insertOne" parameterType="Student" useGeneratedKeys="true" keyColumn="id" keyProperty="id" >
        INSERT INTO student
        (create_at,update_at,name,qq,type,start_time,school,stu_num,daily_link,pro,brother,user_id)
        values
        (#{create_at,jdbcType=BIGINT},
        #{update_at,jdbcType=BIGINT},
        #{name,jdbcType=VARCHAR},
        #{qq,jdbcType=BIGINT},
        #{type,jdbcType=INTEGER},
        #{startTime,jdbcType=VARCHAR},
        #{school,jdbcType=VARCHAR},
        #{stuNum,jdbcType=INTEGER},
        #{dailyLink,jdbcType=VARCHAR},
        #{pro,jdbcType=VARCHAR},
        #{brother,jdbcType=VARCHAR},
        #{userId,jdbcType=INTEGER})
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select @@IDENTITY AS ID
        </selectKey>
    </insert>

    <!--插入多条数据-->
    <insert id="insertForList" parameterType="java.util.List"  useGeneratedKeys="true"  keyProperty="id">

        INSERT INTO student (create_at,update_at,name,qq,type,start_time,school,stu_num,daily_link,pro,brother,user_id)
        values
        <foreach  item="item" collection="list" separator="," index = "index" close=";">
            (#{item.create_at,jdbcType=BIGINT},
            #{item.update_at,jdbcType=BIGINT},
            #{item.name,jdbcType=VARCHAR},
            #{item.qq,jdbcType=BIGINT},
            #{item.type,jdbcType=INTEGER},
            #{item.startTime,jdbcType=VARCHAR},
            #{item.school,jdbcType=VARCHAR},
            #{item.stuNum,jdbcType=INTEGER},
            #{item.dailyLink,jdbcType=VARCHAR},
            #{item.pro,jdbcType=VARCHAR},
            #{item.brother,jdbcType=VARCHAR},
            #{item.userId,jdbcType=INTEGER})
        </foreach>
    </insert>

    <!--修改数据-->
    <update id="updateOne" parameterType="Student" >
        UPDATE student
        SET
        update_at=#{update_at},name=#{name},qq=#{qq},type=#{type},start_time=#{startTime},school=#{school},stu_num=#{stuNum},daily_link=#{dailyLink},pro=#{pro},brother=#{brother},user_id=#{userId} WHERE id=#{id}
    </update>

    <!--修改多条数据-->
    <!--根据每条数据id修改每条数据的值-->
    <update id="updateForList" parameterType="java.util.List" >
        UPDATE student
        <trim prefix="set" suffixOverrides=",">

            <trim prefix="name=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.name!=null">
                        WHEN id=#{item.id} THEN #{item.name}
                    </if>
                </foreach>
            </trim>

            <trim prefix="qq=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.qq!=null and item.qq!=0">
                        WHEN id=#{item.id} THEN #{item.qq}
                    </if>
                </foreach>
            </trim>

            <trim prefix="type=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.type!=null  and item.type!=0">
                        WHEN id=#{item.id} THEN #{item.type}
                    </if>
                </foreach>
            </trim>


            <trim prefix="start_time=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.startTime!=null">
                        WHEN id=#{item.id} THEN #{item.startTime}
                    </if>
                </foreach>
            </trim>


            <trim prefix="school=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.name!=null">
                        WHEN id=#{item.id} THEN #{item.school}
                    </if>
                </foreach>
            </trim>

            <trim prefix="stu_num=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.stuNum!=null  and item.stuNum!=0">
                        WHEN id=#{item.id} THEN #{item.stuNum}
                    </if>
                </foreach>
            </trim>

            <trim prefix="daily_link=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.dailyLink!=null">
                        WHEN id=#{item.id} THEN #{item.dailyLink}
                    </if>
                </foreach>
            </trim>

            <trim prefix="pro=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.pro!=null">
                        WHEN id=#{item.id} THEN #{item.pro}
                    </if>
                </foreach>
            </trim>

            <trim prefix="brother=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.brother!=null">
                        WHEN id=#{item.id} THEN #{item.brother}
                    </if>
                </foreach>
            </trim>

            <trim prefix="user_id=case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.userId!=null and item.userId!=0">
                        WHEN id=#{item.id} THEN #{item.userId}
                    </if>
                </foreach>
            </trim>

        </trim>
        WHERE
        <foreach collection="list" separator="or" item="item" index="index">
            id=#{item.id}
        </foreach>

    </update>

    <!--删除单条数据-->
    <delete id="deleteOne" parameterType="int"  >
        DELETE FROM student WHERE id = #{id}
    </delete>

    <!--删除多条数据 传入id的数组-->
    <delete id="deleteForList" parameterType="java.util.List" >
        DELETE FROM student WHERE id IN
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>




</mapper>