<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:db.properties"/>
    </bean>
    <!-- 配置连接池 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的全局配置文件，放在classpath下的mybatis文件夹中了 这个已经没有什么鸟用
        了，以前在mybatis的时候用全局配置文件创建SqlSessionFactory是因为用到了它里面的用户名和密
        码等信息，Spring已经在dataSource里面已经设置了这些信息，所以只需要dataSource就能得到
        SqlSessionFactory-->
        <!--<property name="configLocation" value="mybatis-config.xml"/>-->
        <!-- 加载数据源，使用上面配置好的数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="mapperLocations" value="UserMapper.xml"/>-->
    </bean>
    <!--这里的id是根据扫描到的package里面的Mapper接口名来定义的，
    这里省略了，因为扫描的结果不唯一,这个bean就是包含了增删改查方法的bean-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--
        basePackage 属性是映射器接口文件的包路径。
                 你可以使用分号或逗号 作为分隔符设置多于一个的包路径
        -->
        <property name="basePackage" value="com.dao"/>
        <!--
                 因为会自动装配 SqlSessionFactory和SqlSessionTemplate
                 所以没 有 必 要 去 指 定 SqlSessionFactory或 SqlSessionTemplate
                 因此可省略不配置；
                 但是,如果你使 用了一个 以上的 DataSource，那么自动装配可能会失效。
                 这种 情况下，你可以使用sqlSessionFactoryBeanName或sqlSessionTemplateBeanName属性来设置正确的 bean名称来使用；
        -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="transferAccounts" class="com.affair.TransferAccounts">
        <property name="transferAccountsDao" ref="transferAccountsDao"></property>
    </bean>

    <bean id="run_timeAspect" class="com.aspect.Run_TimeAspect"></bean>

    <!-- 1.配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 2.配置事务的增强，指定对哪个事务管理器进行增强 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--
                表示来配置你要增强的方法的匹配的一个规则，
                注意：只须改方法的命名规则，其他都是固定的！
                propagation：事务的传播行为。
            -->
            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"></tx:method>
            <!-- <tx:method name="insert*" propagation="REQUIRED"></tx:method> -->
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!-- 配置切入点，对TransferAccounts类里面的所有方法都增强 -->
        <aop:pointcut expression="execution(* com.affair.TransferAccounts.*(..))" id="pointcut1"></aop:pointcut>
        <!--把要滚回的事务切进去-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"/>
        <!-- 配置切面，把要执行的通知切进去 aop:aspect标签里面使用属性ref，ref属性值写增强类的bean的id值 -->
        <aop:aspect ref="run_timeAspect">
            <!--
                增强类型
                method属性：增强类的方法名称
                pointcut-ref属性：切入点的id值
            -->
            <!-- 前置通知 -->
            <aop:around method="run_time" pointcut-ref="pointcut1"/>
        </aop:aspect>
    </aop:config>
</beans>
