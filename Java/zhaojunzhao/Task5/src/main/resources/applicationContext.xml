<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
    <context:property-placeholder location="classpath*:properties/*.properties" file-encoding="UTF-8"/>
    <context:component-scan base-package="com.mutesaid"/>
    <context:annotation-config/>
    <task:annotation-driven/>
    <aop:aspectj-autoproxy/>

    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="readOnly" value="false"/>
        <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
        <property name="connectionTimeout" value="30000"/>
        <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
        <property name="idleTimeout" value="600000"/>
        <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->
        <property name="maxLifetime" value="1800000"/>
        <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
        <property name="maximumPoolSize" value="15"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.mutesaid.mapper"/>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
          p:basenames="classpath:/properties/message"
          p:defaultEncoding="UTF-8"
          p:cacheSeconds="60"/>

    <!-- redis连接池 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"
          p:maxIdle="${redis.maxIdle}"
          p:maxTotal="${redis.maxTotal}"
          p:maxWaitMillis="${redis.maxWaitMillis}"
          p:minEvictableIdleTimeMillis="${redis.minEvictableIdleTimeMillis}"
          p:numTestsPerEvictionRun="${redis.numTestsPerEvictionRun}"
          p:timeBetweenEvictionRunsMillis="${redis.timeBetweenEvictionRunsMillis}"
          p:testOnBorrow="${redis.testOnBorrow}"
          p:testWhileIdle="${redis.testWhileIdle}"/>

    <!-- redis服务器信息 -->
    <bean id="jedisShardInfo" class="redis.clients.jedis.JedisShardInfo"
          p:password="${redis.password}"
          c:host="${redis.hostName}"
          c:port="${redis.port}"/>

    <!-- redis连接工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:password="${redis.password}"
          p:poolConfig-ref="jedisPoolConfig"
          c:shardInfo-ref="jedisShardInfo"/>

    <!-- 序列化方式 -->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>

    <!-- redis操作模板 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="jedisConnectionFactory"
          p:keySerializer-ref="keySerializer"
          p:valueSerializer-ref="valueSerializer"
          p:hashKeySerializer-ref="keySerializer"
          p:hashValueSerializer-ref="valueSerializer"/>

    <bean id="sendMsg" class="com.mutesaid.utils.SendMsgUtil"
          c:SERVER_IP="${msg.server.ip}"
          c:SERVER_PORT="${msg.server.port}"
          c:ACCOUNT_SID="${msg.acount.sid}"
          c:ACCOUNT_TOKEN="${msg.auth.token}"
          c:App_ID="${msg.app.id}"/>

    <bean id="uploadPic" class="com.mutesaid.utils.UploadPicUtil"
          c:url="${picture.url}"
          c:resize="${picture.resize}"/>

    <bean id="emailParams" class="java.util.ArrayList">
        <constructor-arg name="c">
            <array>
                <bean class="org.apache.http.message.BasicNameValuePair"
                      c:name="apiUser"
                      c:value="${email.api.user}"/>
                <bean class="org.apache.http.message.BasicNameValuePair"
                      c:name="apiKey"
                      c:value="${email.api.key}"/>
                <bean class="org.apache.http.message.BasicNameValuePair"
                      c:name="from"
                      c:value="${email.from}"/>
                <bean class="org.apache.http.message.BasicNameValuePair"
                      c:name="fromName"
                      c:value="${email.from.name}"/>
                <bean class="org.apache.http.message.BasicNameValuePair"
                      c:name="subject"
                      c:value="${email.subject}"/>
            </array>
        </constructor-arg>
    </bean>

    <bean id="sendEmail" class="org.apache.http.client.methods.HttpPost"
          c:uri="${email.api}"/>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="5400000"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>
</beans>