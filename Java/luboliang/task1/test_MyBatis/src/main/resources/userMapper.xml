<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="myBatis.UserMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是test表所对应的实体类
    -->
    <!--
        根据id查询得到一个user对象
     -->

    <select id="findUserById" resultType="myBatis.User">
        select * from test where  id=#{id}
    </select>
                         <!--结果映射-->
    <select id="findAll" resultType="myBatis.User">
        SELECT * FROM test
    </select>
<!--keyProperty 和useGeneratedKeys是获取增长的主键id-->
    <insert id="addUser" keyProperty="id" useGeneratedKeys="true" parameterType="myBatis.User">
        INSERT INTO test (name,create_at,update_at,qq,course_type,entrance_time,graduate_school,wish,daily_link,set_to,brother,learn)  VALUES (#{name},#{create_at},#{update_at},#{qq},#{course_type},#{entrance_time},#{graduate_school},#{wish},#{daily_link},#{set_to},#{brother},#{learn})
    </insert>
                                    <!--参数类型-->
    <update id="updateUser" parameterType="myBatis.User" >
        UPDATE test SET name=#{name},create_at=#{create_at},update_at=#{update_at},qq=#{qq},course_type=#{course_type},entrance_time=#{entrance_time},graduate_school=#{graduate_school},wish=#{wish},daily_link=#{daily_link},set_to=#{set_to},brother=#{brother},learn=#{learn} WHERE ID=#{id}

    </update>

    <delete id="deleteUser" parameterType="long">
        DELETE FROM  test where id=#{id}
    </delete>



</mapper>