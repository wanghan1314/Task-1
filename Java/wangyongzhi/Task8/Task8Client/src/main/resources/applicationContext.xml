<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
      http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 自动扫描 -->
    <context:component-scan base-package="service"/>


    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:c3p0.properties"/>
    </bean>

    <bean id="dataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${user}"></property>
        <property name="password" value="${password}"></property>
        <property name="jdbcUrl" value="${jdbcUrl}"></property>
        <property name="driverClass" value="${driverClass}"></property>

        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${maxPoolSize}"></property>
        <!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="${minPoolSize}"></property>
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="${initialPoolSize}"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="${acquireIncrement}"></property>

        <!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="${maxIdleTime}"/>

        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="${acquireRetryAttempts}"></property>

        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"/>
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
                            属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
                            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements" value="${maxStatements}"/>
        <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过
                                  多线程实现多个操作同时被执行。Default: 3-->
        <property name="numHelperThreads" value="${numHelperThreads}"/>

        <!--breakAfterAcquireFailure：出错时不把正在提交的数据抛弃。-->
        <property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}"></property>

        <!--testConnectionOnCheckout：因性能消耗大请只在需要的时候使用它。Default: false -->
        <property name="testConnectionOnCheckout" value="${testConnectionOnCheckout}"></property>

        <!--testConnectionOnCheckin：如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
        <property name="testConnectionOnCheckin" value="${testConnectionOnCheckin}"></property>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 这个是配置包中类的别名，配置后包中的类在XML映射文件中使用时可以省略包名部分，直接使用类名 -->
        <property name="typeAliasesPackage" value="model"/>
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="mapper"/>
    </bean>



    <bean id="profServiceA" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true">
        <property name="serviceUrl" value="rmi://127.0.0.1:9090/porfService"/>
        <property name="serviceInterface" value="service.ProfService"/>
        <!--&lt;!&ndash; 当连接失败时是否刷新远程调用stub &ndash;&gt;-->
        <!--<property name="refreshStubOnConnectFailure" value="true"/>-->
        <!--<property name="lookupStubOnStartup" value="false"/>-->
    </bean>
    <bean id="profServiceB" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true">
        <property name="serviceUrl" value="rmi://39.105:9091/porfService"/>
        <property name="serviceInterface" value="service.ProfService"/>
        <!--&lt;!&ndash; 当连接失败时是否刷新远程调用stub &ndash;&gt;-->
        <!--<property name="refreshStubOnConnectFailure" value="true"/>-->
        <!--<property name="lookupStubOnStartup" value="false"/>-->
    </bean>

    <bean id="stuInfoServiceA" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true" scope="prototype">
        <property name="serviceUrl" value="rmi://39.105.149.2:9092/stuInfoService"/>
        <property name="serviceInterface" value="service.StuInfoService"/>
        <!--&lt;!&ndash; 当连接失败时是否刷新远程调用stub &ndash;&gt;-->
        <!--<property name="refreshStubOnConnectFailure" value="true"/>-->
        <!--<property name="lookupStubOnStartup" value="false"/>-->
    </bean>

    <bean id="stuInfoServiceB" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true" scope="prototype">
        <property name="serviceUrl" value="rmi://39.105.149.2:9093/stuInfoService"/>
        <property name="serviceInterface" value="service.StuInfoService"/>
        <!--&lt;!&ndash; 当连接失败时是否刷新远程调用stub &ndash;&gt;-->
        <!--<property name="refreshStubOnConnectFailure" value="true"/>-->
        <!--<property name="lookupStubOnStartup" value="false"/>-->
    </bean>

</beans>