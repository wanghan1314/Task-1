<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                         http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--使web.xml主页内容有效，使web.xml文件中的初始页面或者servlet配置生效-->
    <mvc:default-servlet-handler/>

    <!--启用spring的一些annotation ,component-sacn包含了annotation-config-->
    <!--<context:annotation-config/>-->

    <!--启动包扫描功能，以便注册带有@Controller、@service、@repository、@Component等注解的类成为spring的bean；@controller注解的类是控制器 -->
    <context:component-scan base-package="controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>

        <!-- 此处多了些配置，防止SpringMVC和SpringIOC对同一个对象的管理重合 -->
        <context:include-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>

    </context:component-scan>

    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上，启动注解驱动的Spring MVC功能，注解驱动,以使得访问路径与方法的匹配可以通过注解配置-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value="text/plain;charset=UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--HandlerMapping 无需配置，springmvc可以默认启动-->


    <!--静态资源映射-->
    <!--本项目把静态资源放在了WEB-INF的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="statics/css/"/>
    <mvc:resources mapping="/js/**" location="statics/js/"/>
    <mvc:resources mapping="/imges/**" location="statics/imges/"/>



    <!-- 视图解析器用来解析视图。对模型视图名称的解析，
    即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)；如何把handle方法返回值解析为实际的物理视图- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>

        <!--视图解析器配置有前缀和后缀两个属性，这样一来，view路径将会缩短。-->
        <property name="prefix" value="/WEB-INF/jsp/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--tiles需要的视图解析器，p:order="1"表示优先级，数字越小，解析器的优先级越高。优先级设置为1-->
    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" p:order="1"/>
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/layout.xml</value>
            </list>
        </property>
    </bean>


</beans>