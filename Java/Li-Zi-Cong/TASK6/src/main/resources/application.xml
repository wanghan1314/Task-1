<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


	<!-- 配置组件扫描器，使用注解方式开发-->
	<!--component-scan会扫描也会注册bean-->
	<!--1）context:component-scan除了包含context:annotation-config
	所有的功能之外还可以自动扫描和注册base-package下有诸如@component之类注解的类，
	并将其作为bean注册到spring容器里。-->
	<context:component-scan base-package="jnshu.service,jnshu.dao,jnshu.controller,jnshu.util,jnshu.aspect"/>
	<!--annotation-config只会扫描，但不会注册bean-->
	<!--2）context:annotation-config可以理解为注解解析器，
	解析诸如@autowired,@Resource之类的注解。前提是注解作用的类已经被注册到spring容器里。-->
	<!--<context:annotation-config/>-->
	<!--总结:component-scan继承annotation-config所有功能，配置了前者spring会无视后者-->

	<!--启用AOP-->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 确定数据源配置文件路径 -->
	<!--<context:property-placeholder location="DB1.properties"/>-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="1"/>
		<property name="locations">
			<list>
				<value>classpath:datasource.properties</value>
				<value>classpath:memcached.properties</value>
				<value>classpath:email.properties</value>
			</list>
		</property>
	</bean>


	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
		<!--<property name="initialSize" value="${initialSize}"/>-->
		<!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;-->
		<!--<property name="maxActive" value="${maxActive}"/>-->
		<!--&lt;!&ndash; 连接池最大空闲 &ndash;&gt;-->
		<!--<property name="maxIdle" value="${maxIdle}"/>-->
		<!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
		<!--<property name="minIdle" value="${minIdle}"/>-->
		<!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
		<!--<property name="maxWait" value="${maxWait}"/>-->
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:mappers/*.xml"/>
	</bean>

	<!--确定mybatis SQL语句模板mapper接口-->
	<!--<bean id="accountMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
		<!--<property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
		<!--<property name="mapperInterface" value="jnshu.dao.AccountMapper"/>-->
	<!--</bean>-->
	<!--<bean id="studentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
		<!--<property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
		<!--<property name="mapperInterface" value="jnshu.dao.StudentMapper"/>-->
	<!--</bean>-->
	<!--<bean id="jobMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
		<!--<property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
		<!--<property name="mapperInterface" value="jnshu.dao.JobMapper"/>-->
	<!--</bean>-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="jnshu.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- Memcached配置 -->
	<bean id="memcachedPool" class="com.whalin.MemCached.SockIOPool"
		  factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
		<property name="servers">
			<list>
				<value>${memcached.server}:${memcached.port}</value>
			</list>
		</property>
		<property name="initConn">
			<value>${memcached.initConn}</value>
		</property>
		<property name="minConn">
			<value>${memcached.minConn}</value>
		</property>
		<property name="maxConn">
			<value>${memcached.maxConn}</value>
		</property>
		<property name="maintSleep">
			<value>${memcached.maintSleep}</value>
		</property>
		<property name="nagle">
			<value>${memcached.nagle}</value>
		</property>
		<property name="socketTO">
			<value>${memcached.socketTO}</value>
		</property>
	</bean>

	<!--阿里云邮箱推送Bean类属性注入-->
	<!--<bean id="email" class="jnshu.pojo.Email">-->
		<!--<property name="host" value="smtp.qq.com"/>-->
		<!--<property name="protocol" value="stmp"/>-->
		<!--<property name="port" value="25"/>-->
		<!--<property name="auth" value="true"/>-->
		<!--<property name="user" value="845634109@qq.com.com"/>-->
		<!--<property name="password" value="javainmyHEART01"/>-->
		<!--<property name="to" value="1057340900@qq.com"/>-->
		<!--&lt;!&ndash;<property name="cc" value="${mail.cc}"/>&ndash;&gt;-->
	<!--</bean>-->



	<bean id="dbLogHandler" class="jnshu.aspect.DBLogHandler"/>
	<!--<bean id="conLogHandler" class="Task4.aspect.ConLogHandler"/>-->
	<aop:config>
		<!--dao-->
		<aop:aspect id="log" ref="dbLogHandler" order="1">
			<aop:pointcut id="printLog" expression="execution(* jnshu.dao.StudentMapper.*(..))" />
			<aop:before method="beforeDAO" pointcut-ref="printLog" />
			<aop:after method="afterDAO" pointcut-ref="printLog" />
		</aop:aspect>
	</aop:config>


</beans>