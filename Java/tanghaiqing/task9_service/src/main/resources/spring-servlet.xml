<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:sca="http://www.springframework.org/schema/sca"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd http://www.springframework.org/schema/sca http://www.osoa.org/xmlns/sca/1.0/spring-sca.xsd">
    <!--配置组件扫描-->
    <context:component-scan base-package="task9"/>
    <!--配置连接池-->
    <util:properties id="config" location="classpath:db.properties"/>
    <bean id="ds" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="#{config.driverClass}"/>
        <property name="jdbcUrl" value="#{config.jdbcUrl}"/>
        <property name="user" value="#{config.user}"/>
        <property name="password" value="#{config.password}"/>
    </bean>
    <!--配置SqlSessionFactoryBean-->
    <!--spring集成mybatis，不在需要mybatis的配置文件（SqlSessionFactoryBean来代替mybatis的配置文件）-->
    <bean id="ssfb" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入连接池-->
        <!--不在使用mybatis自带的连接池，而是使用spring管理的连接池-->
        <property name="dataSource" ref="ds"/>
        <property name="mapperLocations" value="classpath*:mapper/**Mapper.xml"/>
    </bean>
    <!--配置MapperScannerConfigurer
    负责扫描指定包下的所有的Mapper映射器，然后生成符合这些映射器要求的对象
    （其实就是调用SqlSession的getMapper方法），另外还会将这些对象添加到spring容器里面。（bean的id就是对应接口首字母小写的接口名）
    也可以使用@Respository（）来设置id，可以不用加组件扫描，下面的会帮你扫-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--mapper映射器所在的包（相当于jdbc dao层里面的接口，只是这么叫而已）-->
        <property name="basePackage" value="task9.dao"/>
        <!--只扫描特定的接口-->
        <!--开发一个注解，比如@MybatisRepostory，2.将该注解添加到需要扫描的映射器。3.配置MapperScannerConfigurer，设置annotationClass，指定注解类-->
        <!--<property name="annotationClass" value="com.mybatis.annotations.MybatisRepository"/>-->
    </bean>

    <bean id="positionServiceImpl" class="task9.service.PositionServiceImpl"/>
    <sca:service name="PositionService1" type="task9.service.PositionService" target="positionServiceImpl"/>

    <bean id="jobServiceImpl" class="task9.service.JobServiceImpl"/>
    <sca:service name="JobService1" type="task9.service.JobService" target="jobServiceImpl"/>

    <bean id="studentServiceImpl" class="task9.service.StudentServiceImpl"/>
    <sca:service name="StudentService1" type="task9.service.StudentService" target="studentServiceImpl"/>

    <bean id="userServiceImpl" class="task9.service.UserServiceImpl"/>
    <sca:service name="UserService1" type="task9.service.UserService" target="userServiceImpl"/>


</beans>