<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 命名空间可以任选命名，但最好要定义一定规则，-->
<mapper namespace="com.suger.dao.UserDao">
    <!--  一般在查询时使用-->
    <!--已经在mybatis配置中设置别名  所以可以用 User,实际为对应实体类-->
    <resultMap type="user" id="UserResultMap">
        <!--实体类属性 与 数据表字段对应  主键用 id ,其他为result-->
        <id property="id" column="id"/>
        <result property="createAt" column="create_at"/>
        <result property="updateAt" column="update_at"/>
    </resultMap>
    <!-- 定义插入的sql语句，通过命名空间+id方式被定位  应接口存在对应方法-->
    <insert id="insertUser" parameterType="user" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
         insert into
         user(name,pwd,salt,email,tell,img,create_at,update_at)
        values(#{name},#{pwd},#{salt},#{email},#{tell},#{img},#{createAt},#{updateAt})

    </insert>

    <update id="updateUser" parameterType="user">
        update user
        set
        <if test="name != null">
            name=#{name},
        </if>
        <if test="pwd != null">
            pwd=#{pwd},
        </if>
        <if test="salt != null">
            salt=#{salt},
        </if>

        <if test="email != null">
            email=#{email},
        </if>
        <if test="tell != null">
            tell=#{tell},
        </if>
        <if test="img != null">
            img=#{img},
        </if>
        <if test="createAt != null">
            create_at=#{createAt},
        </if>
        <if test="updateAt != null">
            update_at=#{updateAt}
        </if>
        where id = #{id}
    </update>

    <delete id="deleteUser" parameterType="long">
        delete from user where id = #{id}
    </delete>

    <select id="findAll" resultMap="UserResultMap">
        select id,name,pwd,salt,email,tell,img,create_at,update_at from user
        <if test="start != null and count != null">limit #{start},#{count}</if>
    </select>
    <select id="total" resultType="int">
        select count(1) from user
    </select>

    <select id="getUserById" parameterType="long" resultMap="UserResultMap">
        select
            id,name,pwd,salt,email,tell,img,create_at,update_at
        from user where id = #{id};
    </select>

    <select id="getUserByName" parameterType="string" resultMap="UserResultMap">
        select
            id,name,pwd,salt,email,tell,img,create_at,update_at
        from user where name =#{name}
    </select>

    <!--根据姓名模糊查询-->
    <select id="getUser"  resultMap="UserResultMap">
        select id,name,pwd,salt,email,tell,img,create_at,update_at from user
        where name like CONCAT('%',#{name},'%')

    </select>


</mapper>
