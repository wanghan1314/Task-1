<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

  <context:component-scan base-package="com.fangyuyang.service"/>
    <context:component-scan base-package="com.fangyuyang.subsidiary.redis"/>
    <bean id="learnerClient" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true">
        <property name="serviceUrl" value="rmi://120.78.91.61:8091/get_student" />
        <property name = "serviceInterface" value = "com.fangyuyang.service.LearnerService" />
        <property name="lookupStubOnStartup" value="false"/>
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="cacheStub" value="false"/>
    </bean>
    <bean id="learnerClient1" class="org.springframework.remoting.rmi.RmiProxyFactoryBean" lazy-init="true">
        <property name="serviceUrl" value="rmi://120.78.91.61:8092/get_student" />
        <property name = "serviceInterface" value = "com.fangyuyang.service.LearnerService" />
        <property name="lookupStubOnStartup" value="false"/>
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="cacheStub" value="false"/>
    </bean>
    <!--<><><>-->
    <bean id="careerClient" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="serviceUrl" value="rmi://120.78.91.61:8087/get_student" />
        <property name = "serviceInterface" value = "com.fangyuyang.service.CareerService" />
        <property name="lookupStubOnStartup" value="false"/>
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="cacheStub" value="false"/>
    </bean>

    <!--<><><>-->
    <bean id="storageClient" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="serviceUrl" value="rmi://120.78.91.61:8093/get_student" />
        <property name = "serviceInterface" value = "com.fangyuyang.service.StorageService" />
        <property name="lookupStubOnStartup" value="false"/>
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="cacheStub" value="false"/>
    </bean>

    <!--<><><>-->
    <bean id="mailClient" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="serviceUrl" value="rmi://127.0.0.1:8088/get_student" />
        <property name = "serviceInterface" value = "com.fangyuyang.service.MailService" />
        <property name="lookupStubOnStartup" value="false"/>
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="cacheStub" value="false"/>
    </bean>
    <!--<><><>-->
    <bean id="mobileClient" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="serviceUrl" value="rmi://127.0.0.1:8089/get_student" />
        <property name = "serviceInterface" value = "com.fangyuyang.service.MobileService" />
        <property name="lookupStubOnStartup" value="false"/>
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="cacheStub" value="false"/>
    </bean>

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:redis.properties" />
    <!-- redis连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" >
        <!--最大空闲数-->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!--连接池的最大数据库连接数  -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!--最大建立连接等待时间-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
        <!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <!--在空闲时检查有效性, 默认false  -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}" />
    </bean >

    <!--redis连接工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="poolConfig" ref="jedisPoolConfig"></property>
        <!--IP地址 -->
        <property name="hostName" value="${redis.hostName}"></property>
        <!--端口号  -->
        <property name="port" value="${redis.port}"/>
        <!--客户端超时时间单位是毫秒  -->
        <property name="timeout" value="${redis.timeout}"/>
    </bean>

    <!--redis操作模版,使用该对象可以操作redis  -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer" >
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"/>
    </bean >
    <!--自定义redis工具类,在需要缓存的地方注入此类  -->
    <bean id="redisUtil" class="com.fangyuyang.subsidiary.redis.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate" />
    </bean>
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
        <!--<property name="driverClassName" value="com.mysql.jdbc.Driver"/>-->
        <!--<property name="url" value="jdbc:mysql://120.78.91.61:3306/student?useUnicode=true&amp;characterEncoding=UTF-8"/>-->
        <!--<property name="username" value="root"/>-->
        <!--<property name="password" value="654321"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 配置SqlSessionFactory对象 &ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--&lt;!&ndash; 注入数据库连接池 &ndash;&gt;-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--&lt;!&ndash; 扫描sql配置文件:mapper需要的xml文件 &ndash;&gt;-->
        <!--<property name="mapperLocations" value="classpath:com/fangyuyang/mapper/*Mapper.xml"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; DAO接口所在包名，Spring会自动查找其下的类 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
        <!--<property name="basePackage" value="com.fangyuyang.dao" />-->
    <!--</bean>-->
    <!--<bean class="com.fangyuyang.model.ALiYunKey">-->
        <!--<property name="accessKeyId" value="LTAI2J6tr8wRTlUI"/>-->
        <!--<property name="accessKeySecret" value="ZURNnOPjqfydXx2vJ7yoq6SugwKgCk"/>-->
    <!--</bean>-->
    <!--<bean class="com.fangyuyang.model.QiNiuKey">-->
        <!--<property name="accessKeyId" value="Fn_2wk0rWJiSj2bLl5h6ooa-Sf3YJ6B9JQoRvNt4"/>-->
        <!--<property name="accessKeySecret" value="Nz3CsmvQo7yvcghzgIf-ZtyO9GcTFLOs_4lf7JCV"/>-->
    <!--</bean>-->

</beans>
