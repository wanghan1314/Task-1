<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
  <context:component-scan base-package="com.fangyuyang.dao"/>
  <context:component-scan base-package="com.fangyuyang.service"/>
    <context:component-scan base-package="com.fangyuyang.subsidiary.memcache"/>
    <context:property-placeholder location="classpath:memcached.properties"
                                  ignore-unresolvable="true" />
    <!-- memcached 分布式缓存配置 connectionPoolSize 连接数， failureMode 开发模式 -->
    <bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder" >
        <!-- 设置服务器地址端口 ps: 多结点可以配置多个以及权重 -->
        <constructor-arg>
            <list>
                <bean class="java.net.InetSocketAddress">
                    <constructor-arg>
                        <!-- 配置server1 ip地址 -->
                        <value>${memcached.server1.host}</value>
                    </constructor-arg>
                    <constructor-arg>
                        <!-- 配置server1 端口 -->
                        <value>${memcached.server1.port}</value>
                    </constructor-arg>
                </bean>
            </list>
        </constructor-arg>

        <!-- 缓冲区分配器 -->
        <property name="bufferAllocator">
            <bean class="net.rubyeye.xmemcached.buffer.SimpleBufferAllocator"></bean>
        </property>
        <!-- 文本通信编码方式 -->
        <property name="commandFactory">
            <bean class="net.rubyeye.xmemcached.command.TextCommandFactory"></bean>
        </property>
        <!-- Session 分配器 一致hash值 -->
        <property name="sessionLocator">
            <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"></bean>
        </property>
        <!-- 通信转码器 -->
        <property name="transcoder">
            <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
        </property>


        <property name="connectionPoolSize" value="${memcached.connectionPoolSize}"/>
        <!-- <property name="failureMode" value="${memcached.failureMode}"/> -->
    </bean>
    <!-- 使用工厂bean来构建的memcached客户端 -->
    <bean id="memcachedClient" factory-bean="memcachedClientBuilder"
          factory-method="build" destroy-method="shutdown" />
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://120.78.91.61:3306/student?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="root"/>
        <property name="password" value="654321"/>
    </bean>
    <!-- 配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:com/fangyuyang/mapper/*Mapper.xml"/>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.fangyuyang.dao" />
    </bean>
</beans>
<!--<property name="plugins">-->
<!--<array>-->
  <!--<bean class="com.github.pagehelper.PageInterceptor">-->
    <!--<property name="properties">-->
      <!--&lt;!&ndash;使用下面的方式配置参数，一行配置一个 &ndash;&gt;-->
      <!--<value>-->
      <!--</value>-->
    <!--</property>-->
  <!--</bean>-->
<!--</array>-->
<!--</property>-->