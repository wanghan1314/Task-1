<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 开启spring的扫描注入，使用如下注解 -->
    <!-- @Component,@Repository,@Service,@Controller-->
    <context:component-scan base-package="jnshu"/>

    <!-- 开启springMVC的注解驱动，使得url可以映射到对应的controller -->
    <mvc:annotation-driven />

    <!--该指令放行默认的静态资源-->
    <mvc:default-servlet-handler/>

    <!-- SpringAOp,启动@aspectj的自动代理支持-->
    <aop:aspectj-autoproxy />
    <!-- 定义aspect类 -->
    <bean name="timerAspect" class="jnshu.tool.aopTool.TimerAspect"/>


    <!-- 全局异常处理器
只要你实现了HandlerExceptionResolver接口，这个
类就是一个全局异常处理器-->
    <!--<bean class="jnshu.tool.exception.CustomExceptionResolver"></bean>-->


    <!-- 视图解析 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--tiles视图解析器-->
    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" p:order="1"/>
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>WEB-INF/tiles/tiles.xml</value>
            </list>
        </property>
    </bean>

    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <!--<bean class="jnshu.tool.LoginInterceptor"/>-->
        <mvc:interceptor>
            <!--一个星号表示任意字符，使用两个星号表示任意层次的任意字符。-->
            <!--默认拦截的连接-->
            <mvc:mapping path="/u/**"/>
            <!--不拦截的连接-->
            <!--<mvc:exclude-mapping path="t10/**"/>-->
            <!--<mvc:exclude-mapping path="t11/**"/>-->
            <!--登录拦截器-->
            <bean class="jnshu.tool.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


</beans>