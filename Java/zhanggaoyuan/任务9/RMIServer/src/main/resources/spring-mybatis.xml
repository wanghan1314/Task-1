<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:sca="http://www.springframework.org/schema/sca"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/sca http://www.osoa.org/xmlns/sca/1.0/spring-sca.xsd">

    <context:property-placeholder location="classpath:druid-config.properties" ignore-unresolvable="true"/>
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <property name="driverClassName" value="${driverClassName}" />
        <property name="filters" value="${filters}" />
        <property name="maxActive" value="${maxActive}" />
        <property name="initialSize" value="${initialSize}" />
        <property name="maxWait" value="${maxWait}" />
        <property name="minIdle" value="${minIdle}" />
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
        <property name="removeAbandoned" value="${removeAbandoned}"/>
        <property name="poolPreparedStatements" value="${poolPreparedStatements}" />
        <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
    </bean>
    <!-- 2.mybatis的SqlSession的工厂：SqlsessionFactoryBean 。 typeAliasesPackage
        ： value为实体类pojo的包名，可以本来应该全类名使用，这里可以用简单类名代替全类名 -->
    <!--SqlSessionFactory 有一个单独的必须属性,就是 JDBC 的 DataSource，本例命名为mDataSource-->
    <!--通用属性 configLocation，它是用来指定 MyBatis 的 XML 配置文件路径的。-->
    <!--当MyBatis 映射器 XML 文件在和映射器类不在同一路径下,有两种解决方法。
    第一是手动在 MyBatis 的 XML 配 置文件中使用<mappers>部分来指定类路径。
    第二是使用工厂 bean 的 mapperLocations 属 性。-->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="druidDataSource"></property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 扫描entity包 使用别名 -->
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapping/*"></property>
    </bean>
    <!-- 3.mybatis自动扫描加载Sql映射文件/接口:MapperScannerConfiguer。 basePackage:指定Sql映射文件/接口所在的包（自动扫描）
        sqlSessionFactory ： -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="jnshu.dao"/>
    </bean>

    <!--______________________-->
    <sca:service name="StudentService1" type="jnshu.service.StudentService" target="studentServiceImpl"/>
    <bean id="studentServiceImpl" class="jnshu.service.StudentServiceImpl"/>

    <sca:service name="ProfessionService1" type="jnshu.service.ProfessionService" target="professionServiceImpl"/>
    <bean id="professionServiceImpl" class="jnshu.service.ProfessionServiceImpl"/>
    <!--_________________________________-->

    <!-- 4.获取事务管理 DataSourceTransactionManager -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>
    <!-- 5.使用声明式事务 ：引用上面的配置管理器 -->
    <tx:annotation-driven transaction-manager="txManager" />
    <!--注册注解声明-->
    <context:annotation-config/>
    <!--在我们使用注解时一般都会配置扫描包路径选项：-->
    <context:component-scan base-package="jnshu.dao" />
    <context:component-scan base-package="jnshu.model" />
    <context:component-scan base-package="jnshu.service" />
    <!--在配置文件中使用 context 命名空间之前，必须在 <beans> 元素中声明 context 命名空间。-->
</beans>