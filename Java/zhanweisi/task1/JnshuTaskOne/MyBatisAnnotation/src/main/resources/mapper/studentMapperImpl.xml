<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--使用namespace绑定作为DAO的mapper接口文件，因此该namespace的值就是DAO文件的路径和名称-->
<mapper namespace="com.wszhan.mapper.StudentMapper">
    <!-- 根据 id 查询 student 表中的数据
       id:唯一标识符，此文件中的id值不能重复
       resultType:返回值类型，一条数据库记录也就对应实体类的一个对象
       parameterType:参数类型，也就是查询条件的类型
    -->
    <select id="selectStudentById"
            resultType="com.wszhan.pojo.Student" parameterType="int">
        <!-- 这里和普通的sql 查询语句差不多，对于只有一个参数，后面的 #{id}表示占位符，里面不一定要写id,写啥都可以，但是不要空着，如果有多个参数则必须写pojo类里面的属性 -->
        select * from student where id = #{id}
    </select>


    <!-- 查询 student 表的所有数据
        注意：因为是查询所有数据，所以返回的应该是一个集合,这个集合里面每个元素都是Student类型
     -->
    <select id="selectStudentAll" resultType="com.wszhan.pojo.Student">
        select * from student
    </select>

    <!-- 模糊查询：根据 student 表的name字段
            下面两种写法都可以，但是要注意
            1、${value}里面必须要写value，不然会报错
            2、${}表示拼接 sql 字符串，将接收到的参数不加任何修饰拼接在sql语句中
            3、使用${}会造成 sql 注入
     -->
    <select id="selectLikeStudentName" resultType="com.wszhan.pojo.Student" parameterType="String">
        select * from student where name like '%${value}%'
        <!-- select * from student where name like #{name} -->
    </select>

    <!-- 向 student 表插入一条数据 -->
    <insert id="insertStudent" parameterType="com.wszhan.pojo.Student">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select LAST_INSERT_ID();
        </selectKey>
        insert into student(name, age)
            value(#{name},#{age})
    </insert>

    <!-- 根据 id 更新 student 表的数据 -->
    <update id="updateStudentById" parameterType="com.wszhan.pojo.Student">
        update student set name=#{name}, age=#{age} where id=#{id}
    </update>

    <!-- 根据 id 删除 student 表的数据 -->
    <delete id="deleteStudentById" parameterType="int">
        delete from student where id=#{id}
    </delete>
</mapper>