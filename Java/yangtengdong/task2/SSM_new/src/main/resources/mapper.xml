<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ssmTest.dao.UserDao">
    <resultMap id="BaseResultMap" type="com.ssmTest.entity.User">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="userName" property="userName" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="phone" property="phone" jdbcType="VARCHAR" />
        <result column="roleName" property="roleName" jdbcType="VARCHAR" />
    </resultMap>
    <!--<sql>标签作用是后面可以用<include>标签引用<sql>标签中代码-->
    <sql id="Base_Column_List">
        id,userName,password,email,phone,roleName
    </sql>
    <!--根据id查询数据-->
    <select id="selectById" resultMap="BaseResultMap">
        select 
        <include refid="Base_Column_List"/>
        from tb_user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <!--用户登录,根据姓名和密码查找-->
    <select id="loginByUserNameAndPassword" resultMap="BaseResultMap" parameterType="com.ssmTest.entity.User">
        select 
        <include refid="Base_Column_List"/>
        from tb_user
        where
        userName = #{userName}
        and password = #{password}
    </select>

    <!--根据分页数据start和size查询数据-->
    <select id="findByPage" resultMap="BaseResultMap" parameterType="Map">
        select
        <include refid="Base_Column_List"/>
        from tb_user
        <if test="start!=null and size!=null">
            limit #{start},#{size}
        </if>
    </select>

    <!--查询所有用户数据-->
    <select id="selectUserList" resultType="com.ssmTest.entity.User">
        select
        <include refid="Base_Column_List"/>
        from tb_user
    </select>

    <!--查询用户记录总数-->
    <select id="selectCount" resultType="int">
        select count(*) from tb_user
    </select>

    <!--根据id删除一条数据-->
    <delete id="deleteById" parameterType="java.lang.Integer">
        delete from tb_user
        where
        id = #{id,jdbcType=INTEGER}
    </delete>

    <!--插入一条完整数据-->
    <insert id="insert" parameterType="com.ssmTest.entity.User">
        insert into tb_user (id, userName, password,
        email, phone, roleName
        )
        values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR},
        #{password,jdbcType=VARCHAR},
        #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{rolename,jdbcType=VARCHAR}
        )
    </insert>

    <!--动态插入数据-->
    <insert id="insertSelective" parameterType="com.ssmTest.entity.User">
        insert into tb_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id!=null">id,</if>
            <if test="userName!=null">userName,</if>
            <if test="password!=null">password,</if>
            <if test="email!=null">email,</if>
            <if test="phone!=null">phone,</if>
            <if test="roleName!=null">roleName,</if>
        </trim>
        <trim prefix="values(" suffix=")" suffixOverrides=",">
            <if test="id!=null">#{id,jdbcType=INTEGER},</if>
            <if test="userName!=null">#{userName,jdbcType=VARCHAR},</if>
            <if test="password!=null">#{password,jdbcType=VARCHAR},</if>
            <if test="email!=null">#{email,jdbcType=VARCHAR},</if>
            <if test="phone!=null">#{phone,jdbcType=VARCHAR},</if>
            <if test="roleName!=null">#{roleName,jdbcType=VARCHAR},</if>
        </trim>
    </insert>

    <!--根据id更新一条完整数据-->
    <update id="updateById" parameterType="com.ssmTest.entity.User">
        update tb_user
        set userName = #{userName,jdbcType=VARCHAR},
        password = #{password,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        phone = #{phone,jdbcType=VARCHAR},
        roleName = #{roleName,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <!--根据id动态更新-->
    <update id="updateSelective" parameterType="com.ssmTest.entity.User">
        update tb_user
        <trim prefix="set" suffixOverrides=",">
            <if test="userName!=null">userName=#{userName,jdbcType=VARCHAR},</if>
            <if test="password!=null">password=#{password,jdbcType=VARCHAR},</if>
            <if test="email!=null">email=#{email,jdbcType=VARCHAR},</if>
            <if test="phone!=null">phone=#{phone,jdbcType=VARCHAR},</if>
            <if test="roleName!=null">roleName=#{roleName,jdbcType=VARCHAR},</if>
        </trim>
        where id = #{id,jdbcType=INTEGER}
    </update>


</mapper>