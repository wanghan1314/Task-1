<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

  <context:annotation-config/>
  <context:property-placeholder location="classpath:c3p0.properties" ignore-unresolvable="true"/>
  <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
  <context:component-scan base-package="serviceImpl" />
  <context:component-scan base-package="pojo" />


  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" >
    <property name="driverClass" value="${driverClass}"/>
    <property name="jdbcUrl" value="${jdbcUrl}"/>
    <property name="user" value="${user}"/>
    <property name="password" value="${password}"/>
    <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
    <property name="acquireIncrement" value="${acquireIncrement}"/>
    <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
    <property name="initialPoolSize" value="${initialPoolSize}"/>
    <property name="minPoolSize" value="${minPoolSize}"/>
    <property name="maxPoolSize" value="${maxPoolSize}"/>
    <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
    <property name="maxIdleTime" value="${maxIdleTime}"/>
    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
    <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"/>
    <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
                        属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
                        如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
    <property name="maxStatements" value="${maxStatements}"/>
    <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过
                              多线程实现多个操作同时被执行。Default: 3-->
    <property name="numHelperThreads" value="${numHelperThreads}"/>
  </bean>
  <!--通过spring实现mybanits中的SqlSessionFactoryBean-->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="typeAliasesPackage" value="pojo"/>
    <property name="dataSource" ref="dataSource"/>
    <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
    <property name="plugins">
    <array>
      <bean class="com.github.pagehelper.PageInterceptor">
        <property name="properties">
          <!--使用下面的方式配置参数，一行配置一个 -->
          <value>
          </value>
        </property>
      </bean>
    </array>
  </property>
  </bean>
  <!--可以用@autowire实现接口层的实例，不用再写接口实现类-->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="mapper"/>
  </bean>

  <!--&lt;!&ndash; redis config start &ndash;&gt;-->
  <!--&lt;!&ndash; 配置JedisPoolConfig实例 &ndash;&gt;-->
  <!--<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
    <!--<property name="maxIdle" value="${redis.maxIdle}" />-->
    <!--<property name="maxTotal" value="${redis.maxActive}" />-->
    <!--<property name="maxWaitMillis" value="${redis.maxWait}" />-->
    <!--<property name="testOnBorrow" value="${redis.testOnBorrow}" />-->
  <!--</bean>-->

  <!--&lt;!&ndash; 配置JedisConnectionFactory &ndash;&gt;-->
  <!--<bean id="jedisConnectionFactory"-->
        <!--class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
    <!--<property name="hostName" value="${redis.host}" />-->
    <!--<property name="port" value="${redis.port}" />-->
    <!--&lt;!&ndash; <property name="password" value="${redis.pass}" /> &ndash;&gt;-->
    <!--<property name="database" value="${redis.dbIndex}" />-->
    <!--<property name="poolConfig" ref="poolConfig" />-->
  <!--</bean>-->

  <!--<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer">-->
  <!--</bean>-->
  <!--&lt;!&ndash; 配置RedisTemplate &ndash;&gt;-->
  <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
    <!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
    <!--&lt;!&ndash; 新增 &ndash;&gt;-->
    <!--<property name="keySerializer" ref="stringRedisSerializer" />-->
    <!--<property name="hashKeySerializer" ref="stringRedisSerializer" />-->
  <!--</bean>-->

  <!--&lt;!&ndash; 配置RedisCacheManager &ndash;&gt;-->
  <!--<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">-->
    <!--<constructor-arg name="redisOperations" ref="redisTemplate" />-->
    <!--<property name="defaultExpiration" value="${redis.expiration}" />-->
  <!--</bean>-->

  <!--&lt;!&ndash; 配置RedisCacheConfig &ndash;&gt;-->
  <!--<bean id="redisCacheConfig" class="redis.RedisCacheConfig">-->
    <!--<constructor-arg ref="jedisConnectionFactory" />-->
    <!--<constructor-arg ref="redisTemplate" />-->
    <!--<constructor-arg ref="redisCacheManager" />-->
  <!--</bean>-->
   <!--redis config end -->

  <!-- 开启缓存 -->
  <cache:annotation-driven cache-manager="cacheManager" />
  <!-- 配置memcached的缓存服务器 -->
  <bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">
    <constructor-arg>
      <list>
        <bean class="java.net.InetSocketAddress">
          <constructor-arg value="localhost" />
          <constructor-arg value="11211" />
        </bean>
      </list>
    </constructor-arg>
  </bean>
  <bean id="memcachedClient" factory-bean="memcachedClientBuilder" factory-method="build" destroy-method="shutdown" />
  <bean id="cacheManager" class="memcached.MemcachedCacheManager">
    <property name="memcachedClient" ref="memcachedClient" />
    <!-- 配置缓存时间 -->
    <property name="configMap">
      <map>
        <!-- key缓存对象名称   value缓存过期时间 -->
        <entry key="typeList" value="3600" />
      </map>
    </property>
  </bean>

</beans>
