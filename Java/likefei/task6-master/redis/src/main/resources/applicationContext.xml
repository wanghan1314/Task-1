<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.1.xsd">

  <context:annotation-config/>
  <context:property-placeholder location="classpath:c3p0.properties,classpath:redis.properties" />
  <context:component-scan base-package="serviceImpl" />
  <context:component-scan base-package="pojo" />
  <context:component-scan base-package="utils" />


  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" >
    <property name="driverClass" value="${driverClass}"/>
    <property name="jdbcUrl" value="${jdbcUrl}"/>
    <property name="user" value="${user}"/>
    <property name="password" value="${password}"/>
    <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
    <property name="acquireIncrement" value="${acquireIncrement}"/>
    <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
    <property name="initialPoolSize" value="${initialPoolSize}"/>
    <property name="minPoolSize" value="${minPoolSize}"/>
    <property name="maxPoolSize" value="${maxPoolSize}"/>
    <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
    <property name="maxIdleTime" value="${maxIdleTime}"/>
    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
    <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"/>
    <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
                        属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
                        如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
    <property name="maxStatements" value="${maxStatements}"/>
    <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过
                              多线程实现多个操作同时被执行。Default: 3-->
    <property name="numHelperThreads" value="${numHelperThreads}"/>
  </bean>
  <!--通过spring实现mybanits中的SqlSessionFactoryBean-->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="typeAliasesPackage" value="pojo"/>
    <property name="dataSource" ref="dataSource"/>
    <property name="mapperLocations" value="classpath:mapper/*.xml"/>
  </bean>
  <!--可以用@autowire实现接口层的实例，不用再写接口实现类-->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="mapper"/>
  </bean>

  <!-- redis config start -->
  <!-- 配置JedisPoolConfig实例 -->
  <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
    <property name="maxIdle" value="${redis.maxIdle}" />
    <property name="maxTotal" value="${redis.maxActive}" />
    <property name="maxWaitMillis" value="${redis.maxWait}" />
    <property name="testOnBorrow" value="${redis.testOnBorrow}" />
  </bean>

  <!-- 配置JedisConnectionFactory -->
  <bean id="jedisConnectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    <property name="hostName" value="${redis.host}" />
    <property name="port" value="${redis.port}" />
    <!-- <property name="password" value="${redis.pass}" /> -->
    <property name="database" value="${redis.dbIndex}" />
    <property name="poolConfig" ref="poolConfig" />
  </bean>

  <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer">
  </bean>
  <!-- 配置RedisTemplate -->
  <!--redis操作模版,使用该对象可以操作redis  -->
  <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
    <property name="connectionFactory" ref="jedisConnectionFactory" />
    <!-- 新增 -->
    <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
    <property name="keySerializer" ref="stringRedisSerializer" />
    <property name="hashKeySerializer" ref="stringRedisSerializer" />
  </bean>

  <!--<bean id="redisUtil" class="utils.RedisUtil">-->
    <!--<property name="redisTemplate" ref="redisTemplate" />-->
  <!--</bean>-->


  <!-- 配置RedisCacheManager -->
  <!--<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">-->
    <!--<constructor-arg name="redisOperations" ref="redisTemplate" />-->
    <!--<property name="defaultExpiration" value="${redis.expiration}" />-->
  <!--</bean>-->

  <!--&lt;!&ndash; 配置RedisCacheConfig &ndash;&gt;-->
  <!--<bean id="redisCacheConfig" class="redis.RedisCacheConfig">-->
    <!--<constructor-arg ref="jedisConnectionFactory" />-->
    <!--<constructor-arg ref="redisTemplate" />-->
    <!--<constructor-arg ref="redisCacheManager" />-->
  <!--</bean>-->
   <!--redis config end -->
</beans>

