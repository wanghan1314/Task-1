<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <!--引用java配置文件
        当应用了这个配置文件的时候，就需要在开头配置约束，否则会导致读取不到文件，也就读不到数据库-->
    <context:property-placeholder location ="db.properties"/>
    <!--配置数据源-->
    <bean id ="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name ="driverClassName" value="${driver}"/>
        <property name ="url" value="${url}"/>
        <property name ="username" value="${username}"/>
        <property name ="password" value="${password}"/>
    </bean>
    <!--配置SqlSessionFactory，用来得到SqlSession,进而对数据库进行操作-->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定mybatis的全局配置文件的路径-->
        <!-- id=" ",可以自己命名，相当于当前bean的Class里面的别名-->
        <!-- property 里面的name是一个用来找Mybatis配置文件的方法，value里面放想要给的文件的路径-->
        <property name="configLocation" value="SqlMapConfig"></property>
        <!--数据源-->
        <!--ref中的dataSource是上面的那个类的别名，name=dataSource的dataSource是一个类，用来接收数据源 -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- spring创建mapper代理两种方式 -->
    <!-- 第一种，单个配置，一个mapper就一个配置 -->

    <!-- 这里的id是这个类的别名，在接口测试类中调用的就是这个类，在这个类中，赋予了一个映射接口和一个会话工厂用于调用
    所以就不需要通过实现类去实现操作数据。
    -->
    <bean id="Sql" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <!-- 指定要映射的mapper接口的全限定名 -->
        <property name="mapperInterface" value="SignMapper"></property>
        <!-- 指定sqlSessionFactory -->
        <property name="sqlSessionFactory" ref="SqlSessionFactory"></property>
    </bean>

</beans>





