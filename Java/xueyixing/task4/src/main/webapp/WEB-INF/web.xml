<?xml version="1.0" encoding="UTF-8"?>

<web-app version="3.0"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

    <display-name>Archetype Created Web Application</display-name>

    <!-- post防乱码过虑器 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>smileCargo.root</param-value>
    </context-param>
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.xml</param-value>
    </context-param>

    <!-- 加载spring配置文件 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- context-param元素声明应用范围内的初始化参数 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml,classpath:spring_service.xml,classpath:memcachedIOC.xml</param-value>
    </context-param>

    <!-- DispatcherServlet -->
    <!-- servlet 在向servlet或JSP页面制定初始化参数或定制URL时，
    必须首先命名servlet或JSP页面。Servlet元素就是用来完成此项任务的。 -->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring_mvc.xml</param-value>
        </init-param>
        <!-- 表示servlet随服务启动 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- 配置Servlet拦截方式 -->
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <!--Servlet拦截方式
          方式一：*.action，访问以.action结尾由DispatcherServlet进行解析
          方式二：/，所有访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析。
          使用此方式可以实现RESTful风格的url
          方式三：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，
          仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错 -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--一个用户只能在一个主机登录 -->
<!--    <listener>
        <listener-class>com.mvc.util.LoginListenner</listener-class>
    </listener>-->

    <!-- 加载datetag.tld -->
    <jsp-config>
        <taglib>
            <taglib-uri>/tags</taglib-uri>
            <taglib-location>/WEB-INF/tld/DateTag.tld</taglib-location>
        </taglib>
    </jsp-config>

    <!-- 解析 DELETE 和 PUT 请求,前端借助_method属性 -->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
