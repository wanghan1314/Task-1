<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
  - This is the Cocoon web-app configurations file
  -
  - $Id$
  -->
<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <!-- 配置log4j.xml监听器 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>WEB-INF/config/log4j.xml</param-value>
    </context-param>

    <!-- 配置log4j.xml变量，如果需要动态的就使用下面方式，使用方法${name} -->
    <context-param>
        <param-name>controller</param-name>
        <param-value>controller-log</param-value>
    </context-param>

    <context-param>
        <param-name>loggingLevel</param-name>
        <param-value>info</param-value>
    </context-param>

    <!-- 加载log4j配置文件 -->
    <listener>
        <!-- 在Spring 4.2.1中已经将其标记为过时了.如果使用spring4.2.1以上的版本又会造成不兼容
 Log4jConfigListener必须要在Spring的Listener之前。 -->
        <listener-class>org.springframework.web.util.Log4jConfigListener
        </listener-class>
    </listener>


    <!-- post乱码过虑器 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--监听器-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--加载spring容器-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml,classpath:spring-service.xml</param-value>
    </context-param>

    <!-- springmvc前端控制器=>DispatcherServlet  -->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:controller.xml</param-value>
        </init-param>
        <!-- 表示servlet随服务启动 -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <!--Servlet拦截方式
              方式一：*.action，访问以.action结尾由DispatcherServlet进行解析
              方式二：/，所有访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析。
              使用此方式可以实现RESTful风格的url
              方式三：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时，
              仍然会由DispatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错
            -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- jsp自定义tags, 前端jsp时间格式转换 -->
    <jsp-config>
        <taglib>
            <taglib-uri>/tags</taglib-uri>
            <taglib-location>/WEB-INF/tld/datetag.tld</taglib-location>
        </taglib>
    </jsp-config>


    <!-- 解析 DELETE 和 PUT 请求,前端借助_method属性 -->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter
        </filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


</web-app>
        