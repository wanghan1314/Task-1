<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 扫描该包路径下所有使用注解的类型 -->
    <!--<context:component-scan base-package="controller.student.aop" />-->
    <context:component-scan base-package="com.jnshu.*"/>

    <!-- 配置数据库相关参数properties的属性：${url} -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="acquireIncrement" value="3"/><!-- 如果池中数据连接不够时一次增长多少个 -->
        <property name="initialPoolSize" value="2"/>
        <property name="minPoolSize" value="1"/>
        <property name="maxPoolSize" value="100"/>
        <property name="maxStatements" value="100"/>
        <property name="maxStatementsPerConnection" value="200"/> <!-- he's important, but there's only one of him -->
    </bean>
    <!-- 配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath*:com/jnshu/dao/*Mapper.xml"/>
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.jnshu.dao"/>
    </bean>
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath*:application.properties" ignore-unresolvable="true"/>
    <!-- redis数据源 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大空闲数 -->
        <property name="maxIdle" value="400"/>
        <!-- 最大空连接数 -->
        <property name="maxTotal" value="6000"/>
        <!-- 最大等待时间 -->
        <property name="maxWaitMillis" value="1000"/>
        <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted" value="true"/>
        <!-- 返回连接时，检测连接是否成功 -->
        <property name="testOnBorrow" value="true"/>
    </bean>

    <!-- Spring-redis连接池管理工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!--&lt;!&ndash; IP地址 &ndash;&gt;-->
        <!--<property name="hostName" value="127.0.0.1" />-->
        <!--IP地址 -->
        <property name="hostName" value="120.78.128.85"/>
        <!-- 端口号 -->
        <property name="port" value="6379"/>
        <!-- 超时时间 默认2000-->
        <property name="timeout" value="360000"/>
        <!-- 连接池配置引用 -->
        <property name="poolConfig" ref="poolConfig"/>
        <!-- usePool：是否使用连接池 -->
        <property name="usePool" value="true"/>
    </bean>

    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"/>
    </bean>

    <!--自定义redis工具类,在需要缓存的地方注入此类  -->
    <bean id="redisrCacheManager" class="com.jnshu.utils.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>
    <bean id="migrationAQ" class="com.jnshu.tactics.migrationAQ" lazy-init="true"/>
    <bean id="migrationQA" class="com.jnshu.tactics.migrationQA" lazy-init="true"/>
    <bean id="Strategy" class="com.jnshu.tactics.migrationContext" lazy-init="true">
        <constructor-arg name="strategy" ref="migrationQA"/>
    </bean>
</beans>
