<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-4.0.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--0.使用注解驱动-->
        <context:annotation-config/>
    <!--自动扫描注解注入类### dao层@Repository ### service层@Service ###不知道类型@Compnent-->
        <context:component-scan base-package="dao,model,service,service.impl,util"/>

    <!--memcached 缓存配置导入 -->
        <import resource="spring-xmemcached.xml" />
    <!--redis 缓存配置导入 -->
        <!--<import resource="spring-redis.xml"/>-->

    <!--1.配置资源-->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://111.231.109.215:3306/db?characterEncoding=utf8"/>
        <property name ="username" value="root"/>
        <property name="password" value="123456789"/>
        <!--连接池一些属性设置-->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="3" />
        <property name="maxActive" value="80" />
        <property name="maxWait" value="5000" />
        <!-- 自动清除无用连接 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 清除无用连接的等待时间 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 连接属性 -->
        <property name="connectionProperties" value="clientEncoding=UTF-8"/>
    </bean>

    <!--2. 配置sqlSessionFactory-->
    <bean id ="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapper.xml文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <!--3.扫描映射器通过扫描方式配置-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="dao"/>
    </bean>

    <!-- 4.事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--注入jdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!-- 这里支持多种寻址方式：classpath和file -->
                <value>classpath:alisms.properties</value>
                <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
                <value>classpath:alidm.properties</value>
            </list>
        </property>
    </bean>

    <!-- 阿里云短信Bean类注入，管理AccessKey-->
    <bean id="shortMessage" class="pojo.Sms">
        <property name="product" value="${sms.product}"/>
        <property name="domain" value="${sms.domain}"/>
        <property name="accessKeyId" value="${sms.accessKeyId}"/>
        <property name="accessKeySecret" value="${sms.accessKeySecret}"/>
        <property name="templateCode" value="${sms.templateCode}"/>
        <property name="signName" value="${sms.signName}"/>
    </bean>

    <!--阿里云邮箱推送Bean类属性注入-->
    <bean id="email" class="pojo.Email">
        <property name="host" value="${mail.host}"/>
        <property name="protocol" value="${mail.protocol}"/>
        <property name="port" value="${mail.port}"/>
        <property name="auth" value="${mail.auth}"/>
        <property name="user" value="${mail.user}"/>
        <property name="password" value="${mail.password}"/>
        <property name="to" value="${mail.to}"/>
        <property name="cc" value="${mail.cc}"/>
    </bean>

    <!--student服务端-->
    <bean class="org.springframework.remoting.rmi.RmiServiceExporter">
        <!--暴露给客户端的接口为 rmiStudent -->
        <property name="serviceName" value="rmiStudentB"/>
        <property name="service" ref="studentServiceImpl"/>
        <property name="serviceInterface" value="service.StudentService"/>
        <property name="registryPort" value="1200"/>
    </bean>

    <!--career服务端-->
    <bean class="org.springframework.remoting.rmi.RmiServiceExporter">
        <!--暴露给客户端的接口为 rmiStudent -->
        <property name="serviceName" value="rmiCareerB"/>
        <property name="service" ref="careerServiceImpl"/>
        <property name="serviceInterface" value="service.CareerService"/>
        <property name="registryPort" value="1200"/>
    </bean>

    <!--user服务端-->
    <bean class="org.springframework.remoting.rmi.RmiServiceExporter">
        <!--暴露给客户端的接口为 rmiStudent -->
        <property name="serviceName" value="rmiUserB"/>
        <property name="service" ref="userServiceImpl"/>
        <property name="serviceInterface" value="service.UserService"/>
        <property name="registryPort" value="1200"/>
    </bean>


</beans>